name: Main Sync Workflow

on:
  schedule:
    # Run every minute
    - cron: '* * * * *'
  workflow_dispatch: # Allow manual trigger
    inputs:
      custom_timeout:
        description: 'Custom timeout in seconds (default: 300)'
        required: false
        default: '300'
        type: string

jobs:
  main-sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      pull-requests: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0 # Fetch full history for proper git operations
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'pnpm'
    
    
    
    - name: Install dependencies and link CLI
      run: |
        pnpm install
        pnpm run link-all
    
    - name: Configure Git
      run: |
        git config --global user.name "VegaShare Bot"
        git config --global user.email "vegashare-bot@noreply.github.com"
    
    - name: Run auto sync
      env:
        SYNC_TIMEOUT_SECONDS: ${{ github.event.inputs.custom_timeout || vars.SYNC_TIMEOUT_SECONDS || '300' }}
        TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL }}
        TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}
      run: |
        # Use the globally linked vega-cli command
        echo "üîÑ Starting auto sync with timeout: ${SYNC_TIMEOUT_SECONDS} seconds"
        echo "üìç Current working directory: $(pwd)"
        echo "üìÇ Repository root contents:"
        ls -la || echo "‚ùå Cannot list directory"
        
        # Ensure we're in the repository root and use absolute path
        REPO_ROOT=$(pwd)
        VEGA_OUTPUT_PATH="${REPO_ROOT}/vega"
        echo "üéØ Using absolute path for vega output: ${VEGA_OUTPUT_PATH}"
        
        vega-cli check-update --extract --output "${VEGA_OUTPUT_PATH}" --url "https://vegaftp.free.nf/?i=1&seconds=${SYNC_TIMEOUT_SECONDS}"
    
    - name: Check for changes
      id: check-changes
      run: |
        echo "üîç Checking for git changes..."
        
        # Show detailed git status
        echo "üìä Full git status:"
        git status --porcelain || echo "‚ùå Git status failed"
        
        # Show untracked files
        echo "üìÅ Untracked files:"
        git ls-files --others --exclude-standard || echo "‚ùå No untracked files"
        
        # Show modified files
        echo "üìù Modified files:"
        git diff --name-only || echo "‚ùå No modified files"
        
        # Check if there are any changes
        if [ -n "$(git status --porcelain)" ]; then
          echo "‚úÖ Changes detected"
          echo "changes=true" >> $GITHUB_OUTPUT
        else
          echo "‚ÑπÔ∏è No changes detected"
          echo "changes=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Start PHP server
      if: steps.check-changes.outputs.changes == 'true'
      run: |
        echo "üê≥ Starting PHP server for HTML generation..."
        docker compose -f docker-compose.html.yml up -d
        echo "‚è≥ Waiting for PHP server to be ready..."
        sleep 10
        
        # Wait for server to be healthy
        for i in {1..30}; do
          if curl -f http://localhost:8080/server/index.php > /dev/null 2>&1; then
            echo "‚úÖ PHP server is ready!"
            break
          fi
          echo "‚è≥ Waiting for PHP server... ($i/30)"
          sleep 2
        done
    
    - name: Process vega folders (generate HTML in-place under vega and JSON to www/data)
      if: steps.check-changes.outputs.changes == 'true'
      run: |
        echo "üîÑ Processing vega folders for HTML generation and DB upsert..."
        
        # Ensure output data directory exists
        mkdir -p www/data
        
        # Find all folders starting with 'www' in vega directory
        VEGA_FOLDERS=$(find vega -maxdepth 1 -type d -name "www*" | sort)
        
        if [ -z "$VEGA_FOLDERS" ]; then
          echo "‚ÑπÔ∏è No vega folders found to process"
          exit 0
        fi
        
        echo "üìÇ Found vega folders to process:"
        echo "$VEGA_FOLDERS"
        
        # Process each vega folder
        echo "$VEGA_FOLDERS" | while read -r folder; do
          if [ -n "$folder" ]; then
            echo "üîÑ Processing folder: $folder"
            
            # Extract folder name without path
            FOLDER_NAME=$(basename "$folder")
            echo "üìÅ Processing: $FOLDER_NAME"
            
            # Generate HTML from PHP files in-place under vega/$FOLDER_NAME
            echo "üåê Generating HTML for $FOLDER_NAME in-place under vega/$FOLDER_NAME..."
            vega-cli sync-html --server "http://localhost:8080" --folder "$FOLDER_NAME" --output "vega" --verbose
            
            # Generate JSON from HTML files in vega/$FOLDER_NAME
            if [ -d "vega/$FOLDER_NAME" ]; then
              echo "üìÑ Generating JSON for $FOLDER_NAME..."
              vega-cli html-to-json --input "vega/$FOLDER_NAME" --verbose
              
              # Upsert to database
              JSON_FILE="vega/$FOLDER_NAME/data_clean.json"
              if [ -f "$JSON_FILE" ]; then
                echo "üíæ Upserting to database: $JSON_FILE"
                vega-cli upsert-db --file "$JSON_FILE" --verbose
                
                # Copy JSON artifact to www/data/<folder>.json
                DEST_JSON="www/data/${FOLDER_NAME}.json"
                echo "üì¶ Writing JSON artifact to $DEST_JSON"
                cp "$JSON_FILE" "$DEST_JSON"
                echo "‚úÖ Completed processing: $FOLDER_NAME (JSON at $DEST_JSON)"
              else
                echo "‚ö†Ô∏è JSON file not found: $JSON_FILE"
              fi
            else
              echo "‚ö†Ô∏è Source folder not found: vega/$FOLDER_NAME"
            fi
          fi
        done
        
        echo "‚úÖ All vega folders processed"
    
    
    - name: Commit and push changes
      if: steps.check-changes.outputs.changes == 'true'
      run: |
        git add vega/ www/
        git commit -m "Main Sync: Process and deploy tournament data
        
        - Synced files from remote server to vega/
        - Generated HTML from PHP files in html/
        - Generated JSON from HTML files
        - Upserted data to database
        - Moved processed files from html/ to www/
        - Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - Workflow: ${{ github.workflow }}
        - Run ID: ${{ github.run_id }}"
        git push origin main
    
    - name: Stop PHP server
      if: always()
      run: |
        echo "üõë Stopping PHP server..."
        docker compose -f docker-compose.html.yml down
    
    - name: Trigger Static Deploy
      if: steps.check-changes.outputs.changes == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log('üöÄ Triggering static deploy workflow...');
          try {
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'static-deploy.yml',
              ref: context.ref
            });
            console.log('‚úÖ Static deploy workflow triggered successfully');
          } catch (error) {
            console.error('‚ùå Failed to trigger static deploy workflow:', error);
            // Don't fail the entire workflow if trigger fails
          }
    
    - name: Log completion
      run: |
        if [ "${{ steps.check-changes.outputs.changes }}" == "true" ]; then
          echo "‚úÖ Main sync completed successfully:"
          echo "  - Files synced from remote server to vega/"
          echo "  - HTML generated from PHP files in html/"
          echo "  - JSON generated from HTML files"
          echo "  - Data upserted to database"
          echo "  - Processed files moved from html/ to www/"
          echo "  - Changes committed and pushed"
          echo "  - Static deploy triggered"
        else
          echo "‚ÑπÔ∏è No changes detected, skipping processing"
        fi
